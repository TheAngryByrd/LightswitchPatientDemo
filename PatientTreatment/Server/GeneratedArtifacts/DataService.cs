//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Data Services
    
    /// <summary>
    /// Provides members to query and update data in the ApplicationData datasource.
    /// </summary>
    public sealed partial class ApplicationDataService
        : global::LightSwitchApplication.ApplicationData
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ApplicationDataService() : base()
        {
        }
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Server Interceptions Points
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_Inserting(global::LightSwitchApplication.Patient entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_Inserted(global::LightSwitchApplication.Patient entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_Updating(global::LightSwitchApplication.Patient entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_Updated(global::LightSwitchApplication.Patient entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_Deleting(global::LightSwitchApplication.Patient entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_Deleted(global::LightSwitchApplication.Patient entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_Validate(global::LightSwitchApplication.Patient entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_Inserting(global::LightSwitchApplication.Treatment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_Inserted(global::LightSwitchApplication.Treatment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_Updating(global::LightSwitchApplication.Treatment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_Updated(global::LightSwitchApplication.Treatment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_Deleting(global::LightSwitchApplication.Treatment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_Deleted(global::LightSwitchApplication.Treatment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_Validate(global::LightSwitchApplication.Treatment entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_Inserting(global::LightSwitchApplication.SpecificLabs entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_Inserted(global::LightSwitchApplication.SpecificLabs entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_Updating(global::LightSwitchApplication.SpecificLabs entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_Updated(global::LightSwitchApplication.SpecificLabs entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_Deleting(global::LightSwitchApplication.SpecificLabs entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_Deleted(global::LightSwitchApplication.SpecificLabs entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_Validate(global::LightSwitchApplication.SpecificLabs entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executed();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_Single_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_Single_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Patient> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_Single_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Patient> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_Single_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_SingleOrDefault_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Patient> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_SingleOrDefault_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Patient> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Patient> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Patient> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Patients_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_Single_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_Single_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Treatment> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_Single_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Treatment> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_Single_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_SingleOrDefault_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Treatment> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_SingleOrDefault_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Treatment> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Treatment> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Treatment> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Treatments_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_Single_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_Single_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.SpecificLabs> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_Single_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.SpecificLabs> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_Single_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_SingleOrDefault_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.SpecificLabs> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_SingleOrDefault_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.SpecificLabs> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.SpecificLabs> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.SpecificLabs> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SpecificLabsSet_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CurrentPatients_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CurrentPatients_Executing(global::System.Nullable<bool> SelectOnlyCurrent);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CurrentPatients_PreprocessQuery(global::System.Nullable<bool> SelectOnlyCurrent, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Patient> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CurrentPatients_Executed(global::System.Nullable<bool> SelectOnlyCurrent, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Patient> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CurrentPatients_ExecuteFailed(global::System.Nullable<bool> SelectOnlyCurrent, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LabsBetweenTreatments_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LabsBetweenTreatments_Executing(global::System.Nullable<int> TreatmentId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LabsBetweenTreatments_PreprocessQuery(global::System.Nullable<int> TreatmentId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.SpecificLabs> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LabsBetweenTreatments_Executed(global::System.Nullable<int> TreatmentId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.SpecificLabs> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LabsBetweenTreatments_ExecuteFailed(global::System.Nullable<int> TreatmentId, global::System.Exception exception);
    
        #endregion
    
        #region Details Class
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        public static new class DetailsClass
        {
    
            static DetailsClass()
            {
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Patient>
                __PatientsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Patient>(
                    "Patients",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_Validate);
            private static bool __Patients_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Patients_CanInsert(ref result);
                return result;
            }
            private static bool __Patients_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Patients_CanUpdate(ref result);
                return result;
            }
            private static bool __Patients_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Patients_CanDelete(ref result);
                return result;
            }
            private static bool __Patients_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Patients_CanRead(ref result);
                return result;
            }
            private static void __Patients_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Patient e)
            {
                d.Patients_Inserting(e);
            }
            private static void __Patients_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Patient e)
            {
                d.Patients_Inserted(e);
            }
            private static void __Patients_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Patient e)
            {
                d.Patients_Updating(e);
            }
            private static void __Patients_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Patient e)
            {
                d.Patients_Updated(e);
            }
            private static void __Patients_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Patient e)
            {
                d.Patients_Deleting(e);
            }
            private static void __Patients_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Patient e)
            {
                d.Patients_Deleted(e);
            }
            private static void __Patients_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Patient e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Patients_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Treatment>
                __TreatmentsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Treatment>(
                    "Treatments",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_Validate);
            private static bool __Treatments_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Treatments_CanInsert(ref result);
                return result;
            }
            private static bool __Treatments_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Treatments_CanUpdate(ref result);
                return result;
            }
            private static bool __Treatments_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Treatments_CanDelete(ref result);
                return result;
            }
            private static bool __Treatments_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Treatments_CanRead(ref result);
                return result;
            }
            private static void __Treatments_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Treatment e)
            {
                d.Treatments_Inserting(e);
            }
            private static void __Treatments_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Treatment e)
            {
                d.Treatments_Inserted(e);
            }
            private static void __Treatments_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Treatment e)
            {
                d.Treatments_Updating(e);
            }
            private static void __Treatments_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Treatment e)
            {
                d.Treatments_Updated(e);
            }
            private static void __Treatments_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Treatment e)
            {
                d.Treatments_Deleting(e);
            }
            private static void __Treatments_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Treatment e)
            {
                d.Treatments_Deleted(e);
            }
            private static void __Treatments_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Treatment e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Treatments_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.SpecificLabs>
                __SpecificLabsSetEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.SpecificLabs>(
                    "SpecificLabsSet",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_Validate);
            private static bool __SpecificLabsSet_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.SpecificLabsSet_CanInsert(ref result);
                return result;
            }
            private static bool __SpecificLabsSet_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.SpecificLabsSet_CanUpdate(ref result);
                return result;
            }
            private static bool __SpecificLabsSet_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.SpecificLabsSet_CanDelete(ref result);
                return result;
            }
            private static bool __SpecificLabsSet_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.SpecificLabsSet_CanRead(ref result);
                return result;
            }
            private static void __SpecificLabsSet_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.SpecificLabs e)
            {
                d.SpecificLabsSet_Inserting(e);
            }
            private static void __SpecificLabsSet_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.SpecificLabs e)
            {
                d.SpecificLabsSet_Inserted(e);
            }
            private static void __SpecificLabsSet_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.SpecificLabs e)
            {
                d.SpecificLabsSet_Updating(e);
            }
            private static void __SpecificLabsSet_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.SpecificLabs e)
            {
                d.SpecificLabsSet_Updated(e);
            }
            private static void __SpecificLabsSet_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.SpecificLabs e)
            {
                d.SpecificLabsSet_Deleting(e);
            }
            private static void __SpecificLabsSet_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.SpecificLabs e)
            {
                d.SpecificLabsSet_Deleted(e);
            }
            private static void __SpecificLabsSet_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.SpecificLabs e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.SpecificLabsSet_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.ApplicationDataService>
                __SaveChangesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.ApplicationDataService>(
                    "SaveChanges",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Failed);
            private static bool __SaveChanges_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.SaveChanges_CanExecute(ref r);
                return r;
            }
            private static void __SaveChanges_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SaveChanges_Executing();
            }
            private static void __SaveChanges_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SaveChanges_Executed();
            }
            private static void __SaveChanges_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.SaveChanges_ExecuteFailed(ex);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Patient>
                __Patients_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Patient>(
                    "Patients_Single",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_Single_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_Single_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_Single_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_Single_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_Single_PreprocessQuery);
            private static bool __Patients_Single_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.Patients_Single_CanExecute(ref r);
                return r;
            }
            private static void __Patients_Single_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Patients_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Patients_Single_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Patients_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Patient>)args[1]);
            }
            private static void __Patients_Single_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.Patients_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Patients_Single_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Patient> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Patient>)args[1];
                d.Patients_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Patient>
                __Patients_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Patient>(
                    "Patients_SingleOrDefault",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_SingleOrDefault_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_SingleOrDefault_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_SingleOrDefault_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_SingleOrDefault_PreprocessQuery);
            private static bool __Patients_SingleOrDefault_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.Patients_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Patients_SingleOrDefault_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Patients_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Patients_SingleOrDefault_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Patients_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Patient>)args[1]);
            }
            private static void __Patients_SingleOrDefault_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.Patients_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Patients_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Patient> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Patient>)args[1];
                d.Patients_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Patient>
                __Patients_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Patient>(
                    "Patients_All",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_All_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_All_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_All_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_All_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Patients_All_PreprocessQuery);
            private static bool __Patients_All_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.Patients_All_CanExecute(ref r);
                return r;
            }
            private static void __Patients_All_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Patients_All_Executing();
            }
            private static void __Patients_All_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Patients_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Patient>)args[0]);
            }
            private static void __Patients_All_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.Patients_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Patients_All_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Patient> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Patient>)args[0];
                d.Patients_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Treatment>
                __Treatments_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Treatment>(
                    "Treatments_Single",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_Single_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_Single_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_Single_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_Single_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_Single_PreprocessQuery);
            private static bool __Treatments_Single_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.Treatments_Single_CanExecute(ref r);
                return r;
            }
            private static void __Treatments_Single_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Treatments_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Treatments_Single_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Treatments_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Treatment>)args[1]);
            }
            private static void __Treatments_Single_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.Treatments_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Treatments_Single_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Treatment> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Treatment>)args[1];
                d.Treatments_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Treatment>
                __Treatments_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Treatment>(
                    "Treatments_SingleOrDefault",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_SingleOrDefault_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_SingleOrDefault_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_SingleOrDefault_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_SingleOrDefault_PreprocessQuery);
            private static bool __Treatments_SingleOrDefault_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.Treatments_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Treatments_SingleOrDefault_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Treatments_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Treatments_SingleOrDefault_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Treatments_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Treatment>)args[1]);
            }
            private static void __Treatments_SingleOrDefault_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.Treatments_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Treatments_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Treatment> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Treatment>)args[1];
                d.Treatments_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Treatment>
                __Treatments_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Treatment>(
                    "Treatments_All",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_All_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_All_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_All_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_All_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Treatments_All_PreprocessQuery);
            private static bool __Treatments_All_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.Treatments_All_CanExecute(ref r);
                return r;
            }
            private static void __Treatments_All_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Treatments_All_Executing();
            }
            private static void __Treatments_All_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Treatments_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Treatment>)args[0]);
            }
            private static void __Treatments_All_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.Treatments_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Treatments_All_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Treatment> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Treatment>)args[0];
                d.Treatments_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.SpecificLabs>
                __SpecificLabsSet_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.SpecificLabs>(
                    "SpecificLabsSet_Single",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_Single_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_Single_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_Single_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_Single_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_Single_PreprocessQuery);
            private static bool __SpecificLabsSet_Single_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.SpecificLabsSet_Single_CanExecute(ref r);
                return r;
            }
            private static void __SpecificLabsSet_Single_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SpecificLabsSet_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __SpecificLabsSet_Single_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SpecificLabsSet_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.SpecificLabs>)args[1]);
            }
            private static void __SpecificLabsSet_Single_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.SpecificLabsSet_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __SpecificLabsSet_Single_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.SpecificLabs> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.SpecificLabs>)args[1];
                d.SpecificLabsSet_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.SpecificLabs>
                __SpecificLabsSet_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.SpecificLabs>(
                    "SpecificLabsSet_SingleOrDefault",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_SingleOrDefault_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_SingleOrDefault_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_SingleOrDefault_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_SingleOrDefault_PreprocessQuery);
            private static bool __SpecificLabsSet_SingleOrDefault_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.SpecificLabsSet_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __SpecificLabsSet_SingleOrDefault_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SpecificLabsSet_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __SpecificLabsSet_SingleOrDefault_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SpecificLabsSet_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.SpecificLabs>)args[1]);
            }
            private static void __SpecificLabsSet_SingleOrDefault_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.SpecificLabsSet_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __SpecificLabsSet_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.SpecificLabs> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.SpecificLabs>)args[1];
                d.SpecificLabsSet_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.SpecificLabs>
                __SpecificLabsSet_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.SpecificLabs>(
                    "SpecificLabsSet_All",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_All_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_All_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_All_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_All_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SpecificLabsSet_All_PreprocessQuery);
            private static bool __SpecificLabsSet_All_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.SpecificLabsSet_All_CanExecute(ref r);
                return r;
            }
            private static void __SpecificLabsSet_All_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SpecificLabsSet_All_Executing();
            }
            private static void __SpecificLabsSet_All_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SpecificLabsSet_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.SpecificLabs>)args[0]);
            }
            private static void __SpecificLabsSet_All_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.SpecificLabsSet_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __SpecificLabsSet_All_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.SpecificLabs> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.SpecificLabs>)args[0];
                d.SpecificLabsSet_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Patient>
                __CurrentPatientsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Patient>(
                    "CurrentPatients",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__CurrentPatients_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__CurrentPatients_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__CurrentPatients_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__CurrentPatients_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__CurrentPatients_PreprocessQuery);
            private static bool __CurrentPatients_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.CurrentPatients_CanExecute(ref r);
                return r;
            }
            private static void __CurrentPatients_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.CurrentPatients_Executing((global::System.Nullable<bool>)args[0]);
            }
            private static void __CurrentPatients_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.CurrentPatients_Executed((global::System.Nullable<bool>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Patient>)args[1]);
            }
            private static void __CurrentPatients_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.CurrentPatients_ExecuteFailed((global::System.Nullable<bool>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __CurrentPatients_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Patient> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Patient>)args[1];
                d.CurrentPatients_PreprocessQuery((global::System.Nullable<bool>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.SpecificLabs>
                __LabsBetweenTreatmentsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.SpecificLabs>(
                    "LabsBetweenTreatments",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LabsBetweenTreatments_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LabsBetweenTreatments_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LabsBetweenTreatments_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LabsBetweenTreatments_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LabsBetweenTreatments_PreprocessQuery);
            private static bool __LabsBetweenTreatments_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.LabsBetweenTreatments_CanExecute(ref r);
                return r;
            }
            private static void __LabsBetweenTreatments_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.LabsBetweenTreatments_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __LabsBetweenTreatments_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.LabsBetweenTreatments_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.SpecificLabs>)args[1]);
            }
            private static void __LabsBetweenTreatments_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.LabsBetweenTreatments_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __LabsBetweenTreatments_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.SpecificLabs> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.SpecificLabs>)args[1];
                d.LabsBetweenTreatments_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
    
        }
    
        #endregion
    }
    
    #endregion
}
