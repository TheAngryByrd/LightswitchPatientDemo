//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication.Implementation
{
    
    #region Patient
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/ApplicationData.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class Patient :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.Patient.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._Id;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.ValidateProperty("Id", value);
                    this._Id = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        private int _Id;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._FirstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                }
            }
        }
        private string _FirstName;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._LastName = value;
                    this.RaiseDataMemberChanged("LastName");
                }
            }
        }
        private string _LastName;
        
        [global::System.ComponentModel.DataAnnotations.Association("SpecificLabs_Patient", "Id", "SpecificLabs_Patient")]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::System.ServiceModel.DomainServices.Client.EntityCollection<SpecificLabs> SpecificLabsCollection
        {
            get
            {
                if (this._SpecificLabsCollection == null)
                {
                    this._SpecificLabsCollection = new global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.SpecificLabs>(this, "SpecificLabsCollection", this.FilterSpecificLabsCollection, this.AttachSpecificLabsCollection, this.DetachSpecificLabsCollection);
                }
                return this._SpecificLabsCollection;
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.SpecificLabs> _SpecificLabsCollection;
        private void AttachSpecificLabsCollection(global::LightSwitchApplication.Implementation.SpecificLabs entity)
        {
            entity.Patient = this;
        }
        private void DetachSpecificLabsCollection(global::LightSwitchApplication.Implementation.SpecificLabs entity)
        {
            entity.Patient = null;
        }
        private bool FilterSpecificLabsCollection(global::LightSwitchApplication.Implementation.SpecificLabs entity)
        {
            return global::System.Object.Equals(entity.SpecificLabs_Patient, this.Id);
        }
        global::System.Collections.IEnumerable global::LightSwitchApplication.Patient.DetailsClass.IImplementation.SpecificLabsCollection
        {
            get
            {
                return this.SpecificLabsCollection;
            }
        }
        
        [global::System.ComponentModel.DataAnnotations.Association("Treatment_Patient", "Id", "Treatment_Patient")]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::System.ServiceModel.DomainServices.Client.EntityCollection<Treatment> Treatments
        {
            get
            {
                if (this._Treatments == null)
                {
                    this._Treatments = new global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Treatment>(this, "Treatments", this.FilterTreatments, this.AttachTreatments, this.DetachTreatments);
                }
                return this._Treatments;
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityCollection<global::LightSwitchApplication.Implementation.Treatment> _Treatments;
        private void AttachTreatments(global::LightSwitchApplication.Implementation.Treatment entity)
        {
            entity.Patient = this;
        }
        private void DetachTreatments(global::LightSwitchApplication.Implementation.Treatment entity)
        {
            entity.Patient = null;
        }
        private bool FilterTreatments(global::LightSwitchApplication.Implementation.Treatment entity)
        {
            return global::System.Object.Equals(entity.Treatment_Patient, this.Id);
        }
        global::System.Collections.IEnumerable global::LightSwitchApplication.Patient.DetailsClass.IImplementation.Treatments
        {
            get
            {
                return this.Treatments;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region Treatment
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/ApplicationData.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class Treatment :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.Treatment.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._Id;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.ValidateProperty("Id", value);
                    this._Id = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        private int _Id;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public global::System.DateTime DateTreated
        {
            get
            {
                return this._DateTreated;
            }
            set
            {
                if (this._DateTreated != value)
                {
                    this.RaiseDataMemberChanging("DateTreated");
                    this.ValidateProperty("DateTreated", value);
                    this._DateTreated = value;
                    this.RaiseDataMemberChanged("DateTreated");
                }
            }
        }
        private global::System.DateTime _DateTreated;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public string MedicineUsed
        {
            get
            {
                return this._MedicineUsed;
            }
            set
            {
                if (this._MedicineUsed != value)
                {
                    this.RaiseDataMemberChanging("MedicineUsed");
                    this.ValidateProperty("MedicineUsed", value);
                    this._MedicineUsed = value;
                    this.RaiseDataMemberChanged("MedicineUsed");
                }
            }
        }
        private string _MedicineUsed;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int Treatment_Patient
        {
            get
            {
                return this._Treatment_Patient;
            }
            set
            {
                if (this._Treatment_Patient != value)
                {
                    this.RaiseDataMemberChanging("Treatment_Patient");
                    this.ValidateProperty("Treatment_Patient", value);
                    this._Treatment_Patient = value;
                    this.RaiseDataMemberChanged("Treatment_Patient");
                }
            }
        }
        private int _Treatment_Patient;
        
        [global::System.ComponentModel.DataAnnotations.Association("Treatment_Patient", "Treatment_Patient", "Id", IsForeignKey = true)]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::LightSwitchApplication.Implementation.Patient Patient
        {
            get
            {
                if (this._Patient == null)
                {
                    this._Patient = new global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Patient>(this, "Patient", this.FilterPatient);
                }
                return this._Patient.Entity;
            }
            set
            {
                Patient previous = this.Patient;
                if (previous != value)
                {
                    this.ValidateProperty("Patient", value);
                    if (previous != null)
                    {
                        this._Patient.Entity = null;
                        previous.Treatments.Remove(this);
                    }
                    if (value != null)
                    {
                        this.Treatment_Patient = value.Id;
                    }
                    else
                    {
                        this.Treatment_Patient = default(int);
                    }
                    this._Patient.Entity = value;
                    if (value != null)
                    {
                        value.Treatments.Add(this);
                    }
                    this.RaisePropertyChanged("Patient");
                }
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Patient> _Patient;
        private bool FilterPatient(global::LightSwitchApplication.Implementation.Patient entity)
        {
            return global::System.Object.Equals(entity.Id, this.Treatment_Patient);
        }
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Treatment.DetailsClass.IImplementation.Patient
        {
            get
            {
                return this.Patient;
            }
            set
            {
                this.Patient = (global::LightSwitchApplication.Implementation.Patient)value;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region SpecificLabs
    [global::System.Runtime.Serialization.DataContract(Namespace = "http://schemas.datacontract.org/2004/07/ApplicationData.Implementation")]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class SpecificLabs :
        global::System.ServiceModel.DomainServices.Client.Entity,
        global::LightSwitchApplication.SpecificLabs.DetailsClass.IImplementation
    {
        public override object GetIdentity()
        {
            if (this.__host != null && this.__host.IsNewlyAdded)
            {
                return null;
            }
    
            return this._Id;
        }
        [global::System.ComponentModel.DataAnnotations.Key()]
        [global::System.ComponentModel.DataAnnotations.Editable(false, AllowInitialValue = true)]
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.ValidateProperty("Id", value);
                    this._Id = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        private int _Id;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public global::System.DateTime DateLabIssued
        {
            get
            {
                return this._DateLabIssued;
            }
            set
            {
                if (this._DateLabIssued != value)
                {
                    this.RaiseDataMemberChanging("DateLabIssued");
                    this.ValidateProperty("DateLabIssued", value);
                    this._DateLabIssued = value;
                    this.RaiseDataMemberChanged("DateLabIssued");
                }
            }
        }
        private global::System.DateTime _DateLabIssued;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public double ViralLoad
        {
            get
            {
                return this._ViralLoad;
            }
            set
            {
                if (this._ViralLoad != value)
                {
                    this.RaiseDataMemberChanging("ViralLoad");
                    this.ValidateProperty("ViralLoad", value);
                    this._ViralLoad = value;
                    this.RaiseDataMemberChanged("ViralLoad");
                }
            }
        }
        private double _ViralLoad;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public decimal WhiteBloodCellCount
        {
            get
            {
                return this._WhiteBloodCellCount;
            }
            set
            {
                if (this._WhiteBloodCellCount != value)
                {
                    this.RaiseDataMemberChanging("WhiteBloodCellCount");
                    this.ValidateProperty("WhiteBloodCellCount", value);
                    this._WhiteBloodCellCount = value;
                    this.RaiseDataMemberChanged("WhiteBloodCellCount");
                }
            }
        }
        private decimal _WhiteBloodCellCount;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int NumberOfFingers
        {
            get
            {
                return this._NumberOfFingers;
            }
            set
            {
                if (this._NumberOfFingers != value)
                {
                    this.RaiseDataMemberChanging("NumberOfFingers");
                    this.ValidateProperty("NumberOfFingers", value);
                    this._NumberOfFingers = value;
                    this.RaiseDataMemberChanged("NumberOfFingers");
                }
            }
        }
        private int _NumberOfFingers;
        
        [global::System.Runtime.Serialization.DataMember()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginal()]
        public int SpecificLabs_Patient
        {
            get
            {
                return this._SpecificLabs_Patient;
            }
            set
            {
                if (this._SpecificLabs_Patient != value)
                {
                    this.RaiseDataMemberChanging("SpecificLabs_Patient");
                    this.ValidateProperty("SpecificLabs_Patient", value);
                    this._SpecificLabs_Patient = value;
                    this.RaiseDataMemberChanged("SpecificLabs_Patient");
                }
            }
        }
        private int _SpecificLabs_Patient;
        
        [global::System.ComponentModel.DataAnnotations.Association("SpecificLabs_Patient", "SpecificLabs_Patient", "Id", IsForeignKey = true)]
        [global::System.Xml.Serialization.XmlIgnore()]
        public global::LightSwitchApplication.Implementation.Patient Patient
        {
            get
            {
                if (this._Patient == null)
                {
                    this._Patient = new global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Patient>(this, "Patient", this.FilterPatient);
                }
                return this._Patient.Entity;
            }
            set
            {
                Patient previous = this.Patient;
                if (previous != value)
                {
                    this.ValidateProperty("Patient", value);
                    if (previous != null)
                    {
                        this._Patient.Entity = null;
                        previous.SpecificLabsCollection.Remove(this);
                    }
                    if (value != null)
                    {
                        this.SpecificLabs_Patient = value.Id;
                    }
                    else
                    {
                        this.SpecificLabs_Patient = default(int);
                    }
                    this._Patient.Entity = value;
                    if (value != null)
                    {
                        value.SpecificLabsCollection.Add(this);
                    }
                    this.RaisePropertyChanged("Patient");
                }
            }
        }
        private global::System.ServiceModel.DomainServices.Client.EntityRef<global::LightSwitchApplication.Implementation.Patient> _Patient;
        private bool FilterPatient(global::LightSwitchApplication.Implementation.Patient entity)
        {
            return global::System.Object.Equals(entity.Id, this.SpecificLabs_Patient);
        }
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.SpecificLabs.DetailsClass.IImplementation.Patient
        {
            get
            {
                return this.Patient;
            }
            set
            {
                this.Patient = (global::LightSwitchApplication.Implementation.Patient)value;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(e.PropertyName);
            }
        }
        #endregion
    }
    #endregion
    
    #region ApplicationData
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class ApplicationData
        : global::Microsoft.LightSwitch.ClientGenerated.Implementation.DomainContext
    {
        public ApplicationData(global::Microsoft.LightSwitch.IDataService dataService)
            : base(dataService, global::Microsoft.LightSwitch.ClientGenerated.Implementation.DomainContext.CreateWcfDomainClient<IApplicationDataContract>(new global::System.Uri("LightSwitchApplication-Implementation-ApplicationDataDomainService.svc", global::System.UriKind.Relative)))
        {
        }
    
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.Patient> PatientEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.Patient>();
            }
        }
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.Treatment> TreatmentEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.Treatment>();
            }
        }
        public global::System.ServiceModel.DomainServices.Client.EntitySet<global::LightSwitchApplication.Implementation.SpecificLabs> SpecificLabsEntityList
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::LightSwitchApplication.Implementation.SpecificLabs>();
            }
        }
        protected override global::System.ServiceModel.DomainServices.Client.EntityContainer CreateEntityContainer()
        {
            return new ApplicationDataEntityContainer();
        }
    
        internal sealed class ApplicationDataEntityContainer : global::System.ServiceModel.DomainServices.Client.EntityContainer
        {
            public ApplicationDataEntityContainer()
            {
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.Patient>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.Treatment>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
                this.CreateEntitySet<global::LightSwitchApplication.Implementation.SpecificLabs>(global::System.ServiceModel.DomainServices.Client.EntitySetOperations.All);
            }
        }
    
        #region Service Contract Interface
    
        [global::System.ServiceModel.ServiceContract]
        public interface IApplicationDataContract
        {
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/Patients_Single", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/Patients_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/Patients_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginPatients_Single(string frameworkOperators, global::System.Nullable<int> Id, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Patient> EndPatients_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/Patients_SingleOrDefault", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/Patients_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/Patients_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginPatients_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Patient> EndPatients_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/Patients_All", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/Patients_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/Patients_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginPatients_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Patient> EndPatients_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/Treatments_Single", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/Treatments_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/Treatments_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginTreatments_Single(string frameworkOperators, global::System.Nullable<int> Id, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Treatment> EndTreatments_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/Treatments_SingleOrDefault", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/Treatments_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/Treatments_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginTreatments_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Treatment> EndTreatments_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/Treatments_All", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/Treatments_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/Treatments_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginTreatments_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Treatment> EndTreatments_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/SpecificLabsSet_Single", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/SpecificLabsSet_SingleResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/SpecificLabsSet_SingleDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginSpecificLabsSet_Single(string frameworkOperators, global::System.Nullable<int> Id, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.SpecificLabs> EndSpecificLabsSet_Single(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/SpecificLabsSet_SingleOrDefault", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/SpecificLabsSet_SingleOrDefaultResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/SpecificLabsSet_SingleOrDefaultDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginSpecificLabsSet_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.SpecificLabs> EndSpecificLabsSet_SingleOrDefault(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/SpecificLabsSet_All", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/SpecificLabsSet_AllResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/SpecificLabsSet_AllDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginSpecificLabsSet_All(string frameworkOperators, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.SpecificLabs> EndSpecificLabsSet_All(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/CurrentPatients", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/CurrentPatientsResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/CurrentPatientsDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginCurrentPatients(string frameworkOperators, global::System.Nullable<bool> SelectOnlyCurrent, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.Patient> EndCurrentPatients(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/LabsBetweenTreatments", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/LabsBetweenTreatmentsResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/LabsBetweenTreatmentsDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginLabsBetweenTreatments(string frameworkOperators, global::System.Nullable<int> TreatmentId, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.ServiceModel.DomainServices.Client.QueryResult<global::LightSwitchApplication.Implementation.SpecificLabs> EndLabsBetweenTreatments(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/SubmitChanges", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/SubmitChangesResponse"),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/SubmitChangesDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult BeginSubmitChanges(global::System.Collections.Generic.IEnumerable<global::System.ServiceModel.DomainServices.Client.ChangeSetEntry> changeSet, global::System.AsyncCallback callback, global::System.Object asyncState);
            global::System.Collections.Generic.IEnumerable<global::System.ServiceModel.DomainServices.Client.ChangeSetEntry> EndSubmitChanges(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/__GetEntitySetCanInformation", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/__GetEntitySetCanInformationResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/__GetEntitySetCanInformationDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult Begin__GetEntitySetCanInformation(string entitySetName, global::System.AsyncCallback callback, global::System.Object asyncState);
            int End__GetEntitySetCanInformation(global::System.IAsyncResult result);
            
            [global::System.ServiceModel.OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ApplicationDataDomainService/__CanExecuteOperation", ReplyAction = "http://tempuri.org/ApplicationDataDomainService/__CanExecuteOperationResponse"),
             global::System.ServiceModel.Web.WebGet(),
             global::System.ServiceModel.FaultContract(typeof(global::System.ServiceModel.DomainServices.Client.DomainServiceFault), Action = "http://tempuri.org/ApplicationDataDomainService/__CanExecuteOperationDomainServiceFault", Name = "DomainServiceFault", Namespace = "DomainServices")]
            global::System.IAsyncResult Begin__CanExecuteOperation(string operationName, global::System.AsyncCallback callback, global::System.Object asyncState);
            bool End__CanExecuteOperation(global::System.IAsyncResult result);
            
        }
    
        #endregion
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.Patient))
            {
                return new global::LightSwitchApplication.Implementation.Patient();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Treatment))
            {
                return new global::LightSwitchApplication.Implementation.Treatment();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.SpecificLabs))
            {
                return new global::LightSwitchApplication.Implementation.SpecificLabs();
            }
            return null;
        }
    }
    #endregion
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ClientGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.ApplicationData))
            {
                return new global::LightSwitchApplication.ApplicationData();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.ApplicationData))
            {
                return new global::LightSwitchApplication.Implementation.ApplicationData(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.Patient) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.Patient);
            }
            if (typeof(global::LightSwitchApplication.Treatment) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.Treatment);
            }
            if (typeof(global::LightSwitchApplication.SpecificLabs) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.SpecificLabs);
            }
            return null;
        }
    }
}
